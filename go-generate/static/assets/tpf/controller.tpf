{{if .IsNew}}
package controllers
import (
	"net/http"
	"strconv"

	"github.com/JscorpTech/jst-go/internal/application/usecase"
	"github.com/JscorpTech/jst-go/internal/bootstrap"
	"github.com/JscorpTech/jst-go/internal/domain/dto"
	"github.com/JscorpTech/jst-go/internal/domain/interfaces"
	"github.com/JscorpTech/jst-go/internal/models"
	"github.com/JscorpTech/jst-go/internal/shared/messages"
	"github.com/JscorpTech/jst-go/pkg/utils"
	"github.com/JscorpTech/jst-go/pkg/validator"
	"github.com/labstack/echo/v4"
)

{{end}}



type {{.Name}}Controller struct {
	{{.Name}}Usecase interfaces.{{.Name}}UsecasePort
}

func New{{.Name}}Controller(app *bootstrap.App) *{{.Name}}Controller {
	return &{{.Name}}Controller{
		{{.Name}}Usecase: usecase.New{{.Name}}Usecase(app),
	}
}

func (p *{{.Name}}Controller) List(c echo.Context) error {
	// List api view
	intances, err := p.{{.Name}}Usecase.FindAll()
	if err != nil {
		return c.JSON(http.StatusServiceUnavailable, utils.ErrorResponse(err.Error(), nil))
	}
	return c.JSON(http.StatusOK, utils.SuccessResponse("OK", intances))
}

func (p *{{.Name}}Controller) Detail(c echo.Context) error {
	// Detail api view one object
	instanceID, _ := strconv.ParseUint(c.Param("id"), 10, 23)
	instance, err := p.{{.Name}}Usecase.FindByID(uint(instanceID))
	if err != nil {
		return c.JSON(http.StatusNotFound, utils.ErrorResponse("Not found", nil))
	}
	return c.JSON(http.StatusOK, utils.SuccessResponse("OK", instance))
}

func (p *{{.Name}}Controller) Create(c echo.Context) error {
	// Create api view
	var payload dto.{{.Name}}CreateReuqest
	if err := c.Bind(&payload); err != nil {
		return c.JSON(http.StatusBadRequest, utils.ErrorResponse(err.Error(), nil))
	}
	if err := validator.ValidateRequest(&payload); err != nil {
		return c.JSON(http.StatusBadRequest, utils.ErrorResponse(messages.ValidationError, err))
	}
	instance, err := p.{{.Name}}Usecase.Create(payload)
	if err != nil {
		return c.JSON(http.StatusServiceUnavailable, utils.ErrorResponse("Creating error", nil))
	}
	return c.JSON(http.StatusCreated, instance)
}

func (p *{{.Name}}Controller) Delete(c echo.Context) error {
	// Delete api view
	instanceID, _ := strconv.ParseUint(c.Param("id"), 10, 32)
	if err := p.{{.Name}}Usecase.Delete(uint(instanceID)); err != nil {
		return c.JSON(http.StatusNotFound, utils.ErrorResponse("Not found", nil))
	}
	return c.JSON(http.StatusOK, utils.SuccessResponse("Deleted", nil))
}

func (p *{{.Name}}Controller) Update(c echo.Context) error {
	// Update api view all fields required
	var payload dto.{{.Name}}CreateReuqest
	instanceID, _ := strconv.ParseUint(c.Param("id"), 10, 32)
	if err := c.Bind(&payload); err != nil {
		return c.JSON(http.StatusBadRequest, utils.ErrorResponse(err.Error(), nil))
	}
	p.{{.Name}}Usecase.Filter(&models.{{.Name}}Model{}, "id = ?", uint(instanceID)).Updates(payload)
	return c.JSON(http.StatusOK, utils.SuccessResponse("Updated", nil))
}
